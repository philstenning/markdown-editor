{"version":3,"sources":["components/markdown.js","App.js","reportWebVitals.js","index.js"],"names":["Markdown","children","App","useState","content","setContent","handle","setHandle","intervalId","SetIntervalId","a","opts","types","description","accept","window","showOpenFilePicker","fileHandle","getFile","file","text","fileContent","console","log","automaticallySaveChanges","clearInterval","interval","setInterval","writeFile","createWritable","writable","write","close","getNewFileHandle","options","showSaveFilePicker","fHandle","className","onClick","getFileHandle","newFile","name","id","value","onChange","e","target","handleChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAOeA,EAJE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OAAO,cAAC,IAAD,UAAgBA,K,OCuIVC,MApIf,WAAgB,IAAD,EACiBC,mBAAS,SAD1B,mBACNC,EADM,KACGC,EADH,OAEeF,mBAAS,MAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGmBJ,oBAAS,GAH5B,gCAIuBA,mBAAS,IAJhC,mBAINK,EAJM,KAIMC,EAJN,iDAMb,sCAAAC,EAAA,6DACQC,EAAO,CACXC,MAAO,CACL,CACEC,YAAa,iBACbC,OAAQ,CACN,UAAW,CAAC,OACZ,YAAa,CAAC,QAAS,UAG3B,CACED,YAAa,aACbC,OAAQ,CACN,aAAc,CAAC,OAAQ,SACvB,YAAa,CAAC,QAAS,YAdjC,SAoB6BC,OAAOC,mBAAmBL,GApBvD,0CAoBSM,EApBT,KAqBEV,EAAUU,GArBZ,SAsBqBA,EAAWC,UAtBhC,cAsBQC,EAtBR,iBAuB4BA,EAAKC,OAvBjC,QAuBQC,EAvBR,OAwBEC,QAAQC,IAAIjB,GACZgB,QAAQC,IAAIF,GACZhB,EAAWgB,GACXG,IA3BF,6CANa,sBAoCb,IAAMA,EAA2B,WAGZ,IAAfhB,GAAkBiB,cAAcjB,GAEpC,IAAMkB,EAAWC,aAAY,WAC3BL,QAAQC,IAAI,iBAAkBG,GAC9BjB,EAAciB,GACdE,EAAUtB,KACT,MA7CQ,SAoDEsB,EApDF,8EAoDb,WAAyBtB,GAAzB,eAAAI,EAAA,yDACiB,OAAXJ,EADN,gCAG2BA,EAAOuB,iBAHlC,cAGUC,EAHV,gBAKUA,EAASC,MAAM3B,GALzB,uBAOU0B,EAASE,QAPnB,OAQIV,QAAQC,IAAI,cARhB,4CApDa,+BAgEEU,IAhEF,2EAgEb,8BAAAvB,EAAA,6DACQwB,EAAU,CACdtB,MAAO,CACL,CACEC,YAAa,iBACbC,OAAQ,CACN,UAAW,CAAC,WANtB,SAWwBC,OAAOoB,mBAAmBD,GAXlD,cAWQE,EAXR,OAYEd,QAAQC,IAAIa,GAZd,kBAaSA,GAbT,4CAhEa,kEAgFb,4BAAA1B,EAAA,6DACEL,EAAW,IADb,SAE2B4B,IAF3B,OAEQhB,EAFR,OAGEV,EAAUU,GACVW,EAAUX,GACVO,IALF,4CAhFa,sBAiGb,OACE,sBAAKa,UAAU,MAAf,UACE,mCACE,sBAAKA,UAAU,UAAf,UACE,wBAAQC,QAAS,kBArGZ,0CAqGkBC,IAAvB,kBACA,wBAAQD,QAAS,kBAAMV,EAAUtB,IAAjC,kBACA,wBAAQgC,QAAS,kBAvGZ,0CAuGkBE,IAAvB,oBAEF,qBAAKH,UAAU,OAAf,SACE,0CAGJ,sBAAKA,UAAU,SAAf,UACE,0BAEEI,KAAK,GACLC,GAAG,GAGHC,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OArEG,SAACA,GACpBxC,EAAWwC,EAAEC,OAAOH,OAoEGI,CAAaF,MAE/BvC,GACC,sBAAK+B,UAAU,MAAf,UACE,kCAAK/B,EAAOmC,QAAU,UAI5B,qBAAKJ,UAAU,SAAf,SACE,cAAC,EAAD,UAAWjC,UCzHJ4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.01c81cba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nconst Markdown = ({ children }) => {\r\n  return <ReactMarkdown>{children}</ReactMarkdown>;\r\n};\r\n\r\nexport default Markdown;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport MarkDown from \"./components/markdown\";\n\nimport \"./styles/style.css\";\n\nfunction App() {\n  const [content, setContent] = useState(\"Empty\");\n  const [handle, setHandle] = useState(null);\n  const [autoSave, setAutoSave] = useState(false);\n  const [intervalId, SetIntervalId] = useState(0);\n\n  async function getFileHandle() {\n    const opts = {\n      types: [\n        {\n          description: \"Markdown Files\",\n          accept: {\n            \"text/md\": [\".md\"],\n            \"text/html\": [\".html\", \".htm\"],\n          },\n        },\n        {\n          description: \"Text Files\",\n          accept: {\n            \"text/plain\": [\".txt\", \".text\"],\n            \"text/html\": [\".html\", \".htm\"],\n          },\n        },\n      ],\n    };\n\n    const [fileHandle] = await window.showOpenFilePicker(opts);\n    setHandle(fileHandle);\n    const file = await fileHandle.getFile();\n    const fileContent = await file.text();\n    console.log(handle);\n    console.log(fileContent);\n    setContent(fileContent);\n    automaticallySaveChanges();\n  }\n\n  const automaticallySaveChanges = () => {\n    // if (!autoSave) setAutoSave(true);\n\n    if (intervalId !== 0) clearInterval(intervalId);\n\n    const interval = setInterval(() => {\n      console.log(\"saving changes\", interval);\n      SetIntervalId(interval);\n      writeFile(handle);\n    }, 2000);\n  };\n\n  const handleChange = (e) => {\n    setContent(e.target.value);\n  };\n\n  async function writeFile(handle) {\n    if (handle !== null) {\n      // create a fileSystemWriteableFileStream to write to.\n      const writable = await handle.createWritable();\n      // Write the contents of the file to the stream.\n      await writable.write(content);\n      //close the file and write the contents to disk.\n      await writable.close();\n      console.log(\"file saved\");\n    }\n  }\n\n  async function getNewFileHandle() {\n    const options = {\n      types: [\n        {\n          description: \"Markdown Files\",\n          accept: {\n            \"text/md\": [\".md\"],\n          },\n        },\n      ],\n    };\n    const fHandle = await window.showSaveFilePicker(options);\n    console.log(fHandle);\n    return fHandle;\n  }\n\n  async function newFile() {\n    setContent(\"\");\n    const fileHandle = await getNewFileHandle();\n    setHandle(fileHandle);\n    writeFile(fileHandle);\n    automaticallySaveChanges();\n    // setHandle(await window.showSaveFilePicker());\n  }\n\n  const fileName = () => {\n    const result = \"foo\";\n    if (handle) {\n      return handle.name;\n    }\n    return result;\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div className=\"buttons\">\n          <button onClick={() => getFileHandle()}>Open</button>\n          <button onClick={() => writeFile(handle)}>Save</button>\n          <button onClick={() => newFile()}>New</button>\n        </div>\n        <div className=\"info\">\n          <p>info</p>\n        </div>\n      </header>\n      <div className=\"editor\">\n        <textarea\n          // className=\"editor\"\n          name=\"\"\n          id=\"\"\n          // cols=\"30\"\n          // rows=\"10\"\n          value={content}\n          onChange={(e) => handleChange(e)}\n        ></textarea>\n        {handle && (\n          <div className=\"tab\">\n            <p> {handle.name}</p>{\" \"}\n          </div>\n        )}\n      </div>\n      <div className=\"output\">\n        <MarkDown>{content}</MarkDown>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}